/// <reference types="react-navigation" />
import { PortfolioItem, PortfolioProps } from '../../types/portfolio';
import { AnyAction } from 'redux';
declare class PortfolioStateResolver {
    private ids;
    private action;
    readonly state: PortfolioProps;
    readonly itemsPerPage: number;
    readonly activePagesAmount: number;
    constructor(state: PortfolioProps, action: AnyAction, itemsPerPage: number, activePagesAmount: number);
    static initialState(): {
        list: never[];
        isRefreshing: boolean;
        isLoadingMore: boolean;
        allowAppend: boolean;
        allowPrepend: boolean;
        pagesActive: never[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: null;
        itemsRemovedAmount: number;
        needRefresh: boolean;
        showRemoveModal: boolean;
    };
    loadStart(): {
        isRefreshing: boolean;
        list: PortfolioItem[];
        needRefresh: boolean;
        allowPrepend: boolean;
        allowAppend: boolean;
        isLoadingMore: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: string | null;
        itemsRemovedAmount: number;
        showRemoveModal: boolean;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    loadDone(): {
        list: any;
        pagesAmount: number;
        allowAppend: boolean;
        allowPrepend: boolean;
        isLoadingMore: boolean;
        isRefreshing: boolean;
        pagesActive: number[];
        lastPageItemsAmount: number;
        itemsRemovedAmount: number;
        needRefresh: boolean;
        removingItemId: string | null;
        showRemoveModal: boolean;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    loadMoreStart(): {
        isLoadingMore: boolean;
        list: PortfolioItem[];
        needRefresh: boolean;
        isRefreshing: boolean;
        allowPrepend: boolean;
        allowAppend: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: string | null;
        itemsRemovedAmount: number;
        showRemoveModal: boolean;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    loadMoreAppend(): {
        list: PortfolioItem[];
        allowAppend: boolean;
        allowPrepend: boolean;
        isLoadingMore: boolean;
        needRefresh: boolean;
        isRefreshing: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: string | null;
        itemsRemovedAmount: number;
        showRemoveModal: boolean;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    loadMorePrepend(): {
        list: PortfolioItem[];
        isLoadingMore: boolean;
        allowAppend: boolean;
        allowPrepend: boolean;
        needRefresh: boolean;
        isRefreshing: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: string | null;
        itemsRemovedAmount: number;
        showRemoveModal: boolean;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    itemRemoveInit(): {
        showRemoveModal: boolean;
        list: PortfolioItem[];
        needRefresh: boolean;
        isRefreshing: boolean;
        allowPrepend: boolean;
        allowAppend: boolean;
        isLoadingMore: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: string | null;
        itemsRemovedAmount: number;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    itemRemoveCancel(): {
        showRemoveModal: boolean;
        list: PortfolioItem[];
        needRefresh: boolean;
        isRefreshing: boolean;
        allowPrepend: boolean;
        allowAppend: boolean;
        isLoadingMore: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        removingItemId: string | null;
        itemsRemovedAmount: number;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    itemRemoveStart(): {
        removingItemId: any;
        list: PortfolioItem[];
        needRefresh: boolean;
        isRefreshing: boolean;
        allowPrepend: boolean;
        allowAppend: boolean;
        isLoadingMore: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        itemsRemovedAmount: number;
        showRemoveModal: boolean;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    itemRemoveDone(): {
        list: PortfolioItem[];
        itemsRemovedAmount: number;
        removingItemId: null;
        needRefresh: boolean;
        showRemoveModal: boolean;
        isRefreshing: boolean;
        allowPrepend: boolean;
        allowAppend: boolean;
        isLoadingMore: boolean;
        pagesActive: number[];
        pagesAmount: number;
        lastPageItemsAmount: number;
        navigation: import("react-navigation").NavigationScreenProp<unknown, import("react-navigation").NavigationParams>;
        loadPortfolioData: () => void;
        removePortfolioItemInit: () => void;
        removePortfolioItemCancel: () => void;
        removePortfolioItem: (id: string) => void;
        loadMorePortfolioData: (page: number, append: boolean) => void;
    };
    private lastActivePage;
    private resolveNextPageAppend;
    private resolvePrevPagePrepend;
    private extractIds;
    private prepareReceivedList;
    private appendList;
    private prependList;
    private resolvePagesAmount;
    private resolveLastPageItemsAmount;
    private removeItem;
}
export default PortfolioStateResolver;
